/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package front;

import connexion.Connexion;
import entities.Chambre;
import entities.Client;
import entities.Reservation;
import static front.Reservations.id;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import static java.nio.file.Files.size;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import raven.chart.ModelChart;
import service.ChambreService;
import service.ClientService;
import service.ReservationService;

/**
 *
 * @author Badr
 */
public class Reservations extends javax.swing.JInternalFrame {
ReservationService rs=new ReservationService();
ClientService cs=new ClientService();
ChambreService chs= new ChambreService();
private DefaultTableModel model;
public static int id;
java.sql.Connection con;
    /**
     * Creates new form Reservation
     */
    public Reservations() {
        initComponents();
         model=(DefaultTableModel) reservationtable.getModel();
         // curveLineChart1.setTitle("nombre :");
       // curveLineChart1.addLegend("NB Reservations", Color.YELLOW, Color.black);
         load();
         loadchambre();
         loadclient();
        
      
         //showCurveLine();
         
       
         
        
         
         
    }
    
    
    
    
    
    
 public void clear(){
    chambrecombobox.setSelectedItem(false);
    clientcombobox1.setSelectedItem(false);
    jdatedebut.setSelectableDateRange(null, null);
    jdatefin.setSelectableDateRange(null, null);
    //curveLineChart1.setVisible(false);
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationtable = new javax.swing.JTable();
        panelShadow1 = new raven.panel.PanelShadow();
        chambrecombobox = new javax.swing.JComboBox();
        clientcombobox1 = new javax.swing.JComboBox();
        jdatedebut = new com.toedter.calendar.JDateChooser();
        jdatefin = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        pdfbtn = new javax.swing.JButton();
        addbtn = new javax.swing.JButton();
        updatetxt = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setPreferredSize(new java.awt.Dimension(1050, 630));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Liste des reservations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 13))); // NOI18N

        reservationtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Client", "chambre", "date_debut", "date_fin"
            }
        ));
        reservationtable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reservationtableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(reservationtable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        panelShadow1.setBackground(new java.awt.Color(0, 153, 153));
        panelShadow1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gestion des reservations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N
        panelShadow1.setRadius(10);

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Date_fin");

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Date_debut");

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Client ");

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Chambre");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/front/chart (1).png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pdfbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/front/file.png"))); // NOI18N
        pdfbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfbtnActionPerformed(evt);
            }
        });

        addbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/front/add-button.png"))); // NOI18N
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });

        updatetxt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/front/edit.png"))); // NOI18N
        updatetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatetxtActionPerformed(evt);
            }
        });

        deletebtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/front/delete.png"))); // NOI18N
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShadow1Layout = new javax.swing.GroupLayout(panelShadow1);
        panelShadow1.setLayout(panelShadow1Layout);
        panelShadow1Layout.setHorizontalGroup(
            panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShadow1Layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(75, 75, 75)
                .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jdatedebut, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                    .addComponent(clientcombobox1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chambrecombobox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jdatefin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShadow1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pdfbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(panelShadow1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updatetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deletebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(163, Short.MAX_VALUE))))
        );
        panelShadow1Layout.setVerticalGroup(
            panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShadow1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelShadow1Layout.createSequentialGroup()
                        .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pdfbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6))
                    .addGroup(panelShadow1Layout.createSequentialGroup()
                        .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chambrecombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clientcombobox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdatedebut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jdatefin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelShadow1Layout.createSequentialGroup()
                        .addComponent(addbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatetxt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletebtn)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelShadow1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelShadow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    
    
    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed

        Chambre chambre = (Chambre) chambrecombobox.getSelectedItem();
        Client client = (Client) clientcombobox1.getSelectedItem();
        Date date_debut=jdatedebut.getDate();
        Date date_fin=jdatefin.getDate();
     
        
      /* if(chambrecombobox.getSelectedItem()==rs.findall()&& jdatedebut.getDate().after(rs.findById(id).getDatedebut()) || jdatefin.getDate().before(rs.findById(id).getDatefin()) ){
        JOptionPane.showMessageDialog(this, "reservation already exists");
        }*/
        if( date_debut==null && date_fin==null ){
					JOptionPane.showMessageDialog(null, "date fields are empty");
				}else if(date_debut ==null){
					JOptionPane.showMessageDialog(null, "date_debut field is empty ");
				}else if(date_fin ==null){
					JOptionPane.showMessageDialog(null, "date_fin field is empty ");
                                }else if(date_debut.after(date_fin)){
					JOptionPane.showMessageDialog(null, "Impossible !!! date_fin < date debut ");   
                                }
      else if(!rs.checkRes(chambre, date_debut, date_fin)){
					
                                         rs.create(new Reservation(client,chambre,date_debut,date_fin));
                                         JOptionPane.showMessageDialog(this, "reservation created successfully -_-");
                                         load();
                                          }  else{
      
                                           JOptionPane.showMessageDialog(this, "this room is already taken on this date");
			
      
      }
      
      
        /*if(chambrecombobox.getSelectedItem()==null || clientcombobox1.getSelectedItem()==null || jdatedebut.getDate()==null || jdatefin==null){
        JOptionPane.showMessageDialog(this, "oops one of the fields is empty");
        }*/
                               
      
        
        
    }//GEN-LAST:event_addbtnActionPerformed

    private void updatetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatetxtActionPerformed
        Client cl=(Client) clientcombobox1.getSelectedItem();
      Chambre chambre=(Chambre) chambrecombobox.getSelectedItem();
      int answer=JOptionPane.showConfirmDialog(this, "do you really want to update this item?");
      
     Date date_debut=jdatedebut.getDate();
     Date date_fin=jdatefin.getDate();    
     Reservation reservation=rs.findById(id);
     reservation.setChambre(chambre);
     reservation.setClient(cl);
     reservation.setDatedebut(date_debut);
     reservation.setDatefin(date_fin);
  /*  if(chambrecombobox.getSelectedItem().toString().trim().isEmpty()  ){
        JOptionPane.showMessageDialog(this, "one of the fields is empty!!");
    }*/
  if( date_debut==null && date_fin==null ){
					JOptionPane.showMessageDialog(null, "date fields are empty");
				}else if(date_debut ==null){
					JOptionPane.showMessageDialog(null, "date_debut field is empty ");
				}else if(date_fin ==null){
					JOptionPane.showMessageDialog(null, "date_fin field is empty ");
                                }else if(date_debut.after(date_fin)){
					JOptionPane.showMessageDialog(null, "Impossible !!! date_fin < date debut ");   
                                }    
  
                                else if(answer==0){
             if(!rs.checkRes(chambre, date_debut, date_fin)){
                  rs.update(reservation);
                  JOptionPane.showMessageDialog(this, "reservation updated successfully");
                  load();
                  }else{
    JOptionPane.showMessageDialog(this, "this room is already taken on this date");
    }
    }
    

    }//GEN-LAST:event_updatetxtActionPerformed

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed

        Reservation reservation= rs.findById(id);
        int answer=JOptionPane.showConfirmDialog(this, "do you really want to delete this item");
        if(answer==0){
            if(rs.delete(reservation)){
                JOptionPane.showMessageDialog(this, "reservation deleted successfully");
                load();
                clear();
            }else{
                JOptionPane.showMessageDialog(this, "oops something went wrong");
            }
        }

    }//GEN-LAST:event_deletebtnActionPerformed

    private void reservationtableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservationtableMouseClicked
        id=Integer.parseInt(model.getValueAt(reservationtable.getSelectedRow(), 0).toString());
       clientcombobox1.getModel().setSelectedItem(model.getValueAt(reservationtable.getSelectedRow(), 1));
        chambrecombobox.getModel().setSelectedItem(model.getValueAt(reservationtable.getSelectedRow(), 2));
        jdatedebut.setDate((Date) model.getValueAt(reservationtable.getSelectedRow(), 3));
        jdatefin.setDate((Date) model.getValueAt(reservationtable.getSelectedRow(), 4));

    }//GEN-LAST:event_reservationtableMouseClicked

    
    private void pdfbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfbtnActionPerformed
     MessageFormat header =new MessageFormat("Liste des Reservations");
     MessageFormat footer=new MessageFormat("Page{0,number,integer}");
        try {
            reservationtable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        }catch (java.awt.print.PrinterException e) {
            System.err.format("erreur impression", e.getMessage());
        }
    }//GEN-LAST:event_pdfbtnActionPerformed

    
        public void showCurveLine(){
        con= Connexion.getCon();
       //   Client cl = (Client) clientcombobox1.getSelectedItem();
       //  String nom = cl.getNom();
        // String id = (String) clientcombobox1.getSelectedItem();
       // String id=idtext.getText();
		 String req="select EXTRACT(YEAR FROM datedebut),count(*) from reservation  where client_id="+id+" group by EXTRACT(YEAR FROM datedebut)";
               // String req="select DISTINCT(c.libelle),count(ch.chambre_id) from chambre ch,categorie c where c.categorie_id=ch.categorie_id group by ch.categorie_id";
		List<Model_LineCH1> lis=new ArrayList<>();
                
                try {
                  //  pieChart2.clearData();
			PreparedStatement st=con.prepareStatement(req);
			ResultSet res=st.executeQuery();
                       
		while(res.next()){
                    String year=res.getString(1);
                    double nbres=res.getDouble(2);
                  //   pieChart2.addData(new ModelPieChart(nch,nbrch,getC(cnt++)));
                   
                  lis.add(new Model_LineCH1(year,nbres));
                  
                }
                
                
                for(int i=lis.size()-1;i>=0;i--){
                    
                    Model_LineCH1 md=lis.get(i);
                  //  curveLineChart1.addData(new ModelChart(md.getYear(),new double[]{md.getNbres()}));
                }
                
              //  curveLineChart1.start();
              

		}catch(SQLException e) {
			System.out.println("showCurveLine !!");
		}
    }
    
      
        
        
        
        
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // String sql="select c.libelle,count(ch.chambre_id) from chambre ch,categorie c where c.categorie_id=ch.categorie_id group by ch.categorie_id";
        /* Client cl = (Client) clientcombobox1.getSelectedItem();
         String nom = cl.getNom();
         int ide = cl.getId();*/
   

                 //  showCurveLine();
 
                  // curveLineChart1.setVisible(true);
                   
       
       // reserv.setVisible(true);
      
        
         //public void showCurveLine(){
      
         //System.out.print(id);
         //Test2 test2=new Test2();
         //test2.setVisible(true);
         //test2.show();
        // public void showCurveLine(){
        
       
         
         
          Client cl = (Client) clientcombobox1.getSelectedItem();
          String nom = cl.getNom();
          int id = cl.getId();
         String sql="select EXTRACT(YEAR FROM datedebut),count(*) from reservation  where client_id="+id+" group by EXTRACT(YEAR FROM datedebut)";
                JDBCCategoryDataset dataset;

           //  String sql="select EXTRACT(YEAR FROM datedebut),count(*) from reservation  where client_id="+7+" group by EXTRACT(YEAR FROM datedebut)";
   //  JDBCCategoryDataset dataset;
             try {
                dataset = new JDBCCategoryDataset(Connexion.getCon(),sql);
                
                JFreeChart chart2=ChartFactory.createBarChart(""+nom+"'s reservations / year ", "years", "Reservations", dataset,PlotOrientation.VERTICAL,false,true,true);
                BarRenderer bar=null;
                bar=new BarRenderer();
                CategoryPlot plot=chart2.getCategoryPlot();
               
                
                plot.setRangeGridlinePaint(Color.white);
                plot.setBackgroundPaint(Color.white);
            //   plot.setRangeCrosshairPaint(Color.red);
            plot.getRenderer().setPaint(new Color(0, 153,  153));
            
           
                ChartFrame frame=new ChartFrame("Gestion des reservations",chart2);
                chart2.setBorderVisible(false);
                chart2.setBackgroundPaint(Color.white);
               
                frame.setVisible(true);
                frame.setSize(500,400);
                
                frame.setLocation(500,200);
              
            } catch (SQLException ex) {
                Logger.getLogger(Chambre.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
    
    
 public void load(){
    model.setRowCount(0);
    for(entities.Reservation reservation:rs.findall()){
    model.addRow(new Object[]{
    reservation.getId(),
    reservation.getClient(),
    reservation.getChambre(),
    reservation.getDatedebut(),
    reservation.getDatefin(),
    });
    }
    }
  
 
    public void loadchambre(){
    for(Chambre ch:chs.findall()){
    chambrecombobox.addItem(ch);
    }
    
    }
    public void loadclient(){
    for(Client c:cs.findall()){
    clientcombobox1.addItem(c);
    }
    
    
   
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addbtn;
    private javax.swing.JComboBox chambrecombobox;
    private javax.swing.JComboBox clientcombobox1;
    private javax.swing.JButton deletebtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdatedebut;
    private com.toedter.calendar.JDateChooser jdatefin;
    private raven.panel.PanelShadow panelShadow1;
    private javax.swing.JButton pdfbtn;
    private javax.swing.JTable reservationtable;
    private javax.swing.JButton updatetxt;
    // End of variables declaration//GEN-END:variables
}
